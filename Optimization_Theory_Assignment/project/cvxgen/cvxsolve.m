% Produced by CVXGEN, 2018-06-02 01:51:06 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
F_max = params.F_max;
F_max_slew = params.F_max_slew;
if isfield(params, 'G_15')
  G_15 = params.G_15;
elseif isfield(params, 'G')
  G_15 = params.G{15};
else
  error 'could not find G_15'
end
if isfield(params, 'G_16')
  G_16 = params.G_16;
elseif isfield(params, 'G')
  G_16 = params.G{16};
else
  error 'could not find G_16'
end
if isfield(params, 'G_17')
  G_17 = params.G_17;
elseif isfield(params, 'G')
  G_17 = params.G{17};
else
  error 'could not find G_17'
end
if isfield(params, 'G_18')
  G_18 = params.G_18;
elseif isfield(params, 'G')
  G_18 = params.G{18};
else
  error 'could not find G_18'
end
if isfield(params, 'G_19')
  G_19 = params.G_19;
elseif isfield(params, 'G')
  G_19 = params.G{19};
else
  error 'could not find G_19'
end
if isfield(params, 'G_20')
  G_20 = params.G_20;
elseif isfield(params, 'G')
  G_20 = params.G{20};
else
  error 'could not find G_20'
end
if isfield(params, 'G_21')
  G_21 = params.G_21;
elseif isfield(params, 'G')
  G_21 = params.G{21};
else
  error 'could not find G_21'
end
if isfield(params, 'G_22')
  G_22 = params.G_22;
elseif isfield(params, 'G')
  G_22 = params.G{22};
else
  error 'could not find G_22'
end
if isfield(params, 'G_23')
  G_23 = params.G_23;
elseif isfield(params, 'G')
  G_23 = params.G{23};
else
  error 'could not find G_23'
end
if isfield(params, 'G_24')
  G_24 = params.G_24;
elseif isfield(params, 'G')
  G_24 = params.G{24};
else
  error 'could not find G_24'
end
if isfield(params, 'G_25')
  G_25 = params.G_25;
elseif isfield(params, 'G')
  G_25 = params.G{25};
else
  error 'could not find G_25'
end
if isfield(params, 'G_26')
  G_26 = params.G_26;
elseif isfield(params, 'G')
  G_26 = params.G{26};
else
  error 'could not find G_26'
end
H = params.H;
Pos = params.Pos;
Q = params.Q;
d = params.d;
gamma = params.gamma;
sig_env = params.sig_env;
sig_tra = params.sig_tra;
x0 = params.x0;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable x_0(4, 1);
  variable x_1(4, 1);
  variable x_2(4, 1);
  variable x_3(4, 1);
  variable x_4(4, 1);
  variable x_5(4, 1);
  variable x_6(4, 1);
  variable x_7(4, 1);
  variable x_8(4, 1);
  variable x_9(4, 1);
  variable x_10(4, 1);
  variable x_11(4, 1);
  variable x_12(4, 1);
  variable x_13(4, 1);
  variable x_14(4, 1);
  variable x_15(4, 1);
  variable x_16(4, 1);
  variable x_17(4, 1);
  variable x_18(4, 1);
  variable x_19(4, 1);
  variable x_20(4, 1);
  variable x_21(4, 1);
  variable x_22(4, 1);
  variable x_23(4, 1);
  variable x_24(4, 1);
  variable x_25(4, 1);
  variable F_1;
  variable F_0;
  variable F_2;
  variable F_3;
  variable F_4;
  variable F_5;
  variable F_6;
  variable F_7;
  variable F_8;
  variable F_9;
  variable F_10;
  variable F_11;
  variable F_12;
  variable F_13;
  variable F_14;
  variable F_15;
  variable F_16;
  variable F_17;
  variable F_18;
  variable F_19;
  variable F_20;
  variable F_21;
  variable F_22;
  variable F_23;
  variable F_24;
  variable F_25;
  variable S_env_15(2, 1);
  variable S_env_16(2, 1);
  variable S_env_17(2, 1);
  variable S_env_18(2, 1);
  variable S_env_19(2, 1);
  variable S_env_20(2, 1);
  variable S_env_21(2, 1);
  variable S_env_22(2, 1);
  variable S_env_23(2, 1);
  variable S_env_24(2, 1);
  variable S_env_25(2, 1);
  variable S_env_26(2, 1);
  variable S_tra_15(2, 1);
  variable S_tra_16(2, 1);
  variable S_tra_17(2, 1);
  variable S_tra_18(2, 1);
  variable S_tra_19(2, 1);
  variable S_tra_20(2, 1);
  variable S_tra_21(2, 1);
  variable S_tra_22(2, 1);
  variable S_tra_23(2, 1);
  variable S_tra_24(2, 1);
  variable S_tra_25(2, 1);
  variable S_tra_26(2, 1);
  variable x_26(4, 1);

  minimize(quad_form(x_0, Q) + quad_form(x_1, Q) + quad_form(x_2, Q) + quad_form(x_3, Q) + quad_form(x_4, Q) + quad_form(x_5, Q) + quad_form(x_6, Q) + quad_form(x_7, Q) + quad_form(x_8, Q) + quad_form(x_9, Q) + quad_form(x_10, Q) + quad_form(x_11, Q) + quad_form(x_12, Q) + quad_form(x_13, Q) + quad_form(x_14, Q) + quad_form(x_15, Q) + quad_form(x_16, Q) + quad_form(x_17, Q) + quad_form(x_18, Q) + quad_form(x_19, Q) + quad_form(x_20, Q) + quad_form(x_21, Q) + quad_form(x_22, Q) + quad_form(x_23, Q) + quad_form(x_24, Q) + quad_form(x_25, Q) + gamma*(quad_form(F_1 - F_0, eye(1)) + quad_form(F_2 - F_1, eye(1)) + quad_form(F_3 - F_2, eye(1)) + quad_form(F_4 - F_3, eye(1)) + quad_form(F_5 - F_4, eye(1)) + quad_form(F_6 - F_5, eye(1)) + quad_form(F_7 - F_6, eye(1)) + quad_form(F_8 - F_7, eye(1)) + quad_form(F_9 - F_8, eye(1)) + quad_form(F_10 - F_9, eye(1)) + quad_form(F_11 - F_10, eye(1)) + quad_form(F_12 - F_11, eye(1)) + quad_form(F_13 - F_12, eye(1)) + quad_form(F_14 - F_13, eye(1)) + quad_form(F_15 - F_14, eye(1)) + quad_form(F_16 - F_15, eye(1)) + quad_form(F_17 - F_16, eye(1)) + quad_form(F_18 - F_17, eye(1)) + quad_form(F_19 - F_18, eye(1)) + quad_form(F_20 - F_19, eye(1)) + quad_form(F_21 - F_20, eye(1)) + quad_form(F_22 - F_21, eye(1)) + quad_form(F_23 - F_22, eye(1)) + quad_form(F_24 - F_23, eye(1)) + quad_form(F_25 - F_24, eye(1))) + sig_env*S_env_15 + sig_env*S_env_16 + sig_env*S_env_17 + sig_env*S_env_18 + sig_env*S_env_19 + sig_env*S_env_20 + sig_env*S_env_21 + sig_env*S_env_22 + sig_env*S_env_23 + sig_env*S_env_24 + sig_env*S_env_25 + sig_env*S_env_26 + sig_tra*S_tra_15 + sig_tra*S_tra_16 + sig_tra*S_tra_17 + sig_tra*S_tra_18 + sig_tra*S_tra_19 + sig_tra*S_tra_20 + sig_tra*S_tra_21 + sig_tra*S_tra_22 + sig_tra*S_tra_23 + sig_tra*S_tra_24 + sig_tra*S_tra_25 + sig_tra*S_tra_26);
  subject to
    x_0 == x0;
    x_1 == A*x_0 + B*F_0 + d;
    x_2 == A*x_1 + B*F_1 + d;
    x_3 == A*x_2 + B*F_2 + d;
    x_4 == A*x_3 + B*F_3 + d;
    x_5 == A*x_4 + B*F_4 + d;
    x_6 == A*x_5 + B*F_5 + d;
    x_7 == A*x_6 + B*F_6 + d;
    x_8 == A*x_7 + B*F_7 + d;
    x_9 == A*x_8 + B*F_8 + d;
    x_10 == A*x_9 + B*F_9 + d;
    x_11 == A*x_10 + B*F_10 + d;
    x_12 == A*x_11 + B*F_11 + d;
    x_13 == A*x_12 + B*F_12 + d;
    x_14 == A*x_13 + B*F_13 + d;
    x_15 == A*x_14 + B*F_14 + d;
    x_16 == A*x_15 + B*F_15 + d;
    x_17 == A*x_16 + B*F_16 + d;
    x_18 == A*x_17 + B*F_17 + d;
    x_19 == A*x_18 + B*F_18 + d;
    x_20 == A*x_19 + B*F_19 + d;
    x_21 == A*x_20 + B*F_20 + d;
    x_22 == A*x_21 + B*F_21 + d;
    x_23 == A*x_22 + B*F_22 + d;
    x_24 == A*x_23 + B*F_23 + d;
    x_25 == A*x_24 + B*F_24 + d;
    x_26 == A*x_25 + B*F_25 + d;
    abs(F_0) <= F_max;
    abs(F_1) <= F_max;
    abs(F_2) <= F_max;
    abs(F_3) <= F_max;
    abs(F_4) <= F_max;
    abs(F_5) <= F_max;
    abs(F_6) <= F_max;
    abs(F_7) <= F_max;
    abs(F_8) <= F_max;
    abs(F_9) <= F_max;
    abs(F_10) <= F_max;
    abs(F_11) <= F_max;
    abs(F_12) <= F_max;
    abs(F_13) <= F_max;
    abs(F_14) <= F_max;
    abs(F_15) <= F_max;
    abs(F_16) <= F_max;
    abs(F_17) <= F_max;
    abs(F_18) <= F_max;
    abs(F_19) <= F_max;
    abs(F_20) <= F_max;
    abs(F_21) <= F_max;
    abs(F_22) <= F_max;
    abs(F_23) <= F_max;
    abs(F_24) <= F_max;
    abs(F_25) <= F_max;
    abs(F_1 - F_0) <= F_max_slew;
    abs(F_2 - F_1) <= F_max_slew;
    abs(F_3 - F_2) <= F_max_slew;
    abs(F_4 - F_3) <= F_max_slew;
    abs(F_5 - F_4) <= F_max_slew;
    abs(F_6 - F_5) <= F_max_slew;
    abs(F_7 - F_6) <= F_max_slew;
    abs(F_8 - F_7) <= F_max_slew;
    abs(F_9 - F_8) <= F_max_slew;
    abs(F_10 - F_9) <= F_max_slew;
    abs(F_11 - F_10) <= F_max_slew;
    abs(F_12 - F_11) <= F_max_slew;
    abs(F_13 - F_12) <= F_max_slew;
    abs(F_14 - F_13) <= F_max_slew;
    abs(F_15 - F_14) <= F_max_slew;
    abs(F_16 - F_15) <= F_max_slew;
    abs(F_17 - F_16) <= F_max_slew;
    abs(F_18 - F_17) <= F_max_slew;
    abs(F_19 - F_18) <= F_max_slew;
    abs(F_20 - F_19) <= F_max_slew;
    abs(F_21 - F_20) <= F_max_slew;
    abs(F_22 - F_21) <= F_max_slew;
    abs(F_23 - F_22) <= F_max_slew;
    abs(F_24 - F_23) <= F_max_slew;
    abs(F_25 - F_24) <= F_max_slew;
    H*x_15 <= G_15 + S_env_15 + S_tra_15;
    H*x_16 <= G_16 + S_env_16 + S_tra_16;
    H*x_17 <= G_17 + S_env_17 + S_tra_17;
    H*x_18 <= G_18 + S_env_18 + S_tra_18;
    H*x_19 <= G_19 + S_env_19 + S_tra_19;
    H*x_20 <= G_20 + S_env_20 + S_tra_20;
    H*x_21 <= G_21 + S_env_21 + S_tra_21;
    H*x_22 <= G_22 + S_env_22 + S_tra_22;
    H*x_23 <= G_23 + S_env_23 + S_tra_23;
    H*x_24 <= G_24 + S_env_24 + S_tra_24;
    H*x_25 <= G_25 + S_env_25 + S_tra_25;
    H*x_26 <= G_26 + S_env_26 + S_tra_26;
    S_env_15 >= Pos;
    S_env_16 >= Pos;
    S_env_17 >= Pos;
    S_env_18 >= Pos;
    S_env_19 >= Pos;
    S_env_20 >= Pos;
    S_env_21 >= Pos;
    S_env_22 >= Pos;
    S_env_23 >= Pos;
    S_env_24 >= Pos;
    S_env_25 >= Pos;
    S_env_26 >= Pos;
    S_tra_15 >= Pos;
    S_tra_16 >= Pos;
    S_tra_17 >= Pos;
    S_tra_18 >= Pos;
    S_tra_19 >= Pos;
    S_tra_20 >= Pos;
    S_tra_21 >= Pos;
    S_tra_22 >= Pos;
    S_tra_23 >= Pos;
    S_tra_24 >= Pos;
    S_tra_25 >= Pos;
    S_tra_26 >= Pos;
cvx_end
vars.F_0 = F_0;
vars.F_1 = F_1;
vars.F{1} = F_1;
vars.F_2 = F_2;
vars.F{2} = F_2;
vars.F_3 = F_3;
vars.F{3} = F_3;
vars.F_4 = F_4;
vars.F{4} = F_4;
vars.F_5 = F_5;
vars.F{5} = F_5;
vars.F_6 = F_6;
vars.F{6} = F_6;
vars.F_7 = F_7;
vars.F{7} = F_7;
vars.F_8 = F_8;
vars.F{8} = F_8;
vars.F_9 = F_9;
vars.F{9} = F_9;
vars.F_10 = F_10;
vars.F{10} = F_10;
vars.F_11 = F_11;
vars.F{11} = F_11;
vars.F_12 = F_12;
vars.F{12} = F_12;
vars.F_13 = F_13;
vars.F{13} = F_13;
vars.F_14 = F_14;
vars.F{14} = F_14;
vars.F_15 = F_15;
vars.F{15} = F_15;
vars.F_16 = F_16;
vars.F{16} = F_16;
vars.F_17 = F_17;
vars.F{17} = F_17;
vars.F_18 = F_18;
vars.F{18} = F_18;
vars.F_19 = F_19;
vars.F{19} = F_19;
vars.F_20 = F_20;
vars.F{20} = F_20;
vars.F_21 = F_21;
vars.F{21} = F_21;
vars.F_22 = F_22;
vars.F{22} = F_22;
vars.F_23 = F_23;
vars.F{23} = F_23;
vars.F_24 = F_24;
vars.F{24} = F_24;
vars.F_25 = F_25;
vars.F{25} = F_25;
vars.S_env_15 = S_env_15;
vars.S_env{15} = S_env_15;
vars.S_env_16 = S_env_16;
vars.S_env{16} = S_env_16;
vars.S_env_17 = S_env_17;
vars.S_env{17} = S_env_17;
vars.S_env_18 = S_env_18;
vars.S_env{18} = S_env_18;
vars.S_env_19 = S_env_19;
vars.S_env{19} = S_env_19;
vars.S_env_20 = S_env_20;
vars.S_env{20} = S_env_20;
vars.S_env_21 = S_env_21;
vars.S_env{21} = S_env_21;
vars.S_env_22 = S_env_22;
vars.S_env{22} = S_env_22;
vars.S_env_23 = S_env_23;
vars.S_env{23} = S_env_23;
vars.S_env_24 = S_env_24;
vars.S_env{24} = S_env_24;
vars.S_env_25 = S_env_25;
vars.S_env{25} = S_env_25;
vars.S_env_26 = S_env_26;
vars.S_env{26} = S_env_26;
vars.S_tra_15 = S_tra_15;
vars.S_tra{15} = S_tra_15;
vars.S_tra_16 = S_tra_16;
vars.S_tra{16} = S_tra_16;
vars.S_tra_17 = S_tra_17;
vars.S_tra{17} = S_tra_17;
vars.S_tra_18 = S_tra_18;
vars.S_tra{18} = S_tra_18;
vars.S_tra_19 = S_tra_19;
vars.S_tra{19} = S_tra_19;
vars.S_tra_20 = S_tra_20;
vars.S_tra{20} = S_tra_20;
vars.S_tra_21 = S_tra_21;
vars.S_tra{21} = S_tra_21;
vars.S_tra_22 = S_tra_22;
vars.S_tra{22} = S_tra_22;
vars.S_tra_23 = S_tra_23;
vars.S_tra{23} = S_tra_23;
vars.S_tra_24 = S_tra_24;
vars.S_tra{24} = S_tra_24;
vars.S_tra_25 = S_tra_25;
vars.S_tra{25} = S_tra_25;
vars.S_tra_26 = S_tra_26;
vars.S_tra{26} = S_tra_26;
vars.x_0 = x_0;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
vars.x_12 = x_12;
vars.x{12} = x_12;
vars.x_13 = x_13;
vars.x{13} = x_13;
vars.x_14 = x_14;
vars.x{14} = x_14;
vars.x_15 = x_15;
vars.x{15} = x_15;
vars.x_16 = x_16;
vars.x{16} = x_16;
vars.x_17 = x_17;
vars.x{17} = x_17;
vars.x_18 = x_18;
vars.x{18} = x_18;
vars.x_19 = x_19;
vars.x{19} = x_19;
vars.x_20 = x_20;
vars.x{20} = x_20;
vars.x_21 = x_21;
vars.x{21} = x_21;
vars.x_22 = x_22;
vars.x{22} = x_22;
vars.x_23 = x_23;
vars.x{23} = x_23;
vars.x_24 = x_24;
vars.x{24} = x_24;
vars.x_25 = x_25;
vars.x{25} = x_25;
vars.x_26 = x_26;
vars.x{26} = x_26;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
